# -*- mode: ruby -*-
# vi: set ft=ruby :
# vim: set et :

Vagrant.configure("2") do |config|
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # We use the original ubuntu box with ubuntu 16.04 LTS
  config.vm.box = "bento/ubuntu-18.04"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # Avoiding IP conflicts with FH network based on 10.*.*.*
  config.vm.network "private_network", ip: "192.168.7.7"

  # Mapping a folder, that can be used for WEB excercises, allowing apache running as www-data to write data to these directories
  config.vm.synced_folder "code", "/var/www/html/code", create: true, owner: "www-data", group: "www-data"
  
  config.vm.boot_timeout = 1500

	# Configuring Image for use as web development environment
  config.vm.provision "Installing and/or configuring Apache2, PHP 7.4 with extensions and Xdebug", type: "shell",
    inline:  <<-SH
	  # PHP PPA
	  add-apt-repository -y ppa:ondrej/php
	  # Redis Server PPA
      add-apt-repository -y ppa:chris-lea/redis-server
      apt-get -y -qq update

	  echo "#############################################"
	  echo "## Installing Apache, PHP 7.4 + Extensions ##"
	  echo "#############################################"
      apt-get -y -qq install apache2 php7.4 libapache2-mod-php7.4
      apt-get -y -qq install php7.4-zip php7.4-mysql php7.4-curl php7.4-dev php7.4-gd php7.4-intl php-pear php-imagick php7.4-imap php7.4-tidy php7.4-xmlrpc php7.4-xsl php7.4-mbstring php7.4-xml php-gettext php-xdebug
      apt-get -y -qq install zip unzip

	  echo "###############################################"
	  echo "## Activating SSL and mod_rewrite for Apache ##"
	  echo "###############################################"
	  a2enmod rewrite
	  a2enmod ssl
      a2ensite default-ssl

	  echo "################################"
	  echo "# Activating XDEBUG for Apache #"
	  echo "################################"
	  INI=/etc/php/7.4/mods-available/xdebug.ini
      >> "$INI" echo 'xdebug.remote_enable=1'
      >> "$INI" echo 'xdebug.remote_connect_back=1'
      >> "$INI" echo 'xdebug.remote_port=9000'

	  echo "########################################"
	  echo "## Adding permanent redirect to HTTPs ##"
	  echo "########################################"
	  cd /etc/apache2/sites-available
      sed -i '29i #' 000-default.conf
      sed -i '30i # Redirct permanently to https ' 000-default.conf
      sed -i '31i # added by Martin Harrer for demonstration purposes in web lessons' 000-default.conf
      sed -i '32i Redirect permanent / https://192.168.7.7/' 000-default.conf

  	  echo "#############################################################"
  	  echo "## Switching to AllowOverride All for /var/www/html/code/* ##"
  	  echo "#############################################################"
  	  cd /etc/apache2/sites-available
        sed -i '131i <Directory /var/www/html/code/*>' default-ssl.conf
        sed -i '132i        Options Indexes FollowSymLinks MultiViews' default-ssl.conf
        sed -i '133i        AllowOverride All' default-ssl.conf
        sed -i '134i </Directory>' default-ssl.conf
    SH

  config.vm.provision "Installing and/or configuring MariaDB, PHPMyAdmin", type: "shell",
    inline:  <<-SH
	  echo "######################################################"
	  echo "## Setting debconf-settings for noninteractive mode ##"
	  echo "######################################################"
	  export DEBIAN_FRONTEND=noninteractive
      debconf-set-selections <<< 'mariadb-server-10.4 mysql-server/root_password password geheim'
      debconf-set-selections <<< 'mariadb-server-10.4 mysql-server/root_password_again password geheim'
      
	  echo "#######################################"
	  echo "## Installing MariaDB and PHPMyAdmin ##"
	  echo "#######################################"
	  
	  # MariaDB 10.4
	  # apt-get install software-properties-common
      #apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
	  apt-key adv --fetch-keys 'https://mariadb.org/mariadb_release_signing_key.asc'
      add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirror.klaus-uwe.me/mariadb/repo/10.4/ubuntu bionic main'
      apt-get -y -qq update
      apt-get -y -qq install mariadb-server mariadb-client
	  mysql -uroot -pgeheim -e "CREATE USER 'onlineshop'@'localhost' IDENTIFIED BY 'geheim'"
      mysql -uroot -pgeheim -e "GRANT ALL PRIVILEGES ON *.* TO 'onlineshop'@'localhost'"
      mysql -uroot -pgeheim -e "GRANT ALL PRIVILEGES ON *.* TO 'debian-sys-maint'@'localhost'"
	  apt-get -y -qq install phpmyadmin

	  echo "################################################"
	  echo "## Linking PHPMyAdmin to Apache Document Root ##"
	  echo "################################################"
      ln -s /usr/share/phpmyadmin/ /var/www/html/phpmyadmin
	SH

  # config.vm.provision "Installing and/or configuring OracleJRE, Elasticsearch, Redis", type: "shell",
    # inline:  <<-SH
	  # echo "###########################"
	  # echo "## Installing Oracle JRE ##"
	  # echo "###########################"
	  
	  # cd /home/vagrant
	  # mkdir .local
	  # chown vagrant:vagrant .local
	  # cd /home/vagrant/.local
	  # curl -s -L -b "oraclelicense=a" http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jre-8u191-linux-x64.tar.gz -O
	  # echo "813f48192558fea793af22c96b1b708694bffe36111a33d354f312c1c1ae4bf2  jre-8u191-linux-x64.tar.gz" | sha256sum --check --status
      # if [ $? == 0 ]
      # then
        # chmod 777 jre-8u191-linux-x64.tar.gz;
		# tar zvxf jre-8u191-linux-x64.tar.gz;
		# chown -R vagrant:vagrant jre1.8.0_191
        # echo "export JAVA_HOME=/home/vagrant/.local/jre1.8.0_191" >> /home/vagrant/.bashrc;		
	  # else
	    # echo "Oracle JRE not installed" && exit 1;
      # fi
	  
	  # echo "##############################"
	  # echo "## Installing ElasticSearch ##"
	  # echo "##############################"

      # wget --quiet https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.tar.gz
      # wget --quiet https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.tar.gz.sha512
      # shasum -a 512 -c elasticsearch-6.4.3.tar.gz.sha512 
      # if [ $? == 0 ]
      # then
        # chmod 777 elasticsearch-6.4.3.tar.gz;
        # tar -xzf elasticsearch-6.4.3.tar.gz
		# chown -R vagrant:vagrant elasticsearch-6.4.3
        # echo "export ES_HOME=/home/vagrant/.local/elasticsearch-6.4.3" >> /home/vagrant/.bashrc;		
	  # else
	    # echo "ElasticSearch not installed" && exit 1;
      # fi
	  
	  # echo "#############################################"
	  # echo "## Installing German Decompound Dictionary ##"
	  # echo "#############################################"

      # git clone https://github.com/uschindler/german-decompounder.git
      # cd elasticsearch-6.4.3/config
      # mkdir analysis
	  # chown vagrant:vagrant analysis
      # cd analysis
      # cp ../../../german-decompounder/de_DR.xml .
      # cp ../../../german-decompounder/dictionary-de.txt .
	  	  
	  # echo "#####################################################"
	  # echo "## Installing Redis Server and PHP Redis Extension ##"
	  # echo "#####################################################"

      # apt-get -y install redis-server php-redis
      # sed -i '70i bind localhost 192.168.7.7' /etc/redis/redis.conf
      # sed -i '509i requirepass geheim' /etc/redis/redis.conf
   	# SH
	
  config.vm.provision "## Installing PHP_CodeSniffer ##", type: "shell",
    inline:  <<-SH
	  cd /usr/local/bin
	  curl -s -Ol https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
      curl -s -Ol https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar
	  mv phpcs.phar /usr/local/bin/phpcs
      mv phpcbf.phar /usr/local/bin/phpcbf
	  chown root:root phpcs phpcbf
	  chmod 755 phpcs phpcbf
	SH
	
  config.vm.provision "## Installing composer ##", type: "shell",
    inline:  <<-SH
	  cd /home/vagrant
      EXPECTED_CHECKSUM="$(wget -q -O - https://composer.github.io/installer.sig)"
      php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
      if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
      then
          >&2 echo '## ERROR: Invalid installer checksum for composer. Composer not installed. ##'
          rm composer-setup.php
          exit 1
      fi
      php composer-setup.php --install-dir=/usr/local/bin
      rm composer-setup.php
	  mv /usr/local/bin/composer.phar /usr/local/bin/composer
	SH
	
  config.vm.provision "## Providing some Shell Scripts in $HOME/bin ##", type: "shell",
    inline:  <<-SH
	  cd /home/vagrant
      mkdir bin
	  chown vagrant:vagrant bin
	  cd bin
	  cp /vagrant/bin/*.sh .
	  chown vagrant:vagrant *.sh
	  cp /vagrant/bin/phpinfo.php /var/www/html
	SH
	
	    
  config.vm.provision "## Starting Apache and MariaDB with run: always ##", type: "shell", run: "always",
    inline: <<-SH
	  service apache2 restart  && echo "Apache started with return code $?"   
      service mysql restart  && echo "MariaDB started with return $?"
	  #service redis-server restart && echo "Redis started with return $?"
    SH
	
end
