# -*- mode: ruby -*-
# vi: set ft=ruby :
# vim: set et :

Vagrant.configure("2") do |config|
  # Using the Bento Ubuntu box with Ubuntu 18.04 LTS
  config.vm.box = "bento/ubuntu-20.04"

  # Creating a private network, which allows host-only access to the machine using a specific IP.
  # Important: avoid IP conflicts with the university network based on 10.*.*.*
  config.vm.network "private_network", ip: "192.168.7.7"

  # Mapping a folder, that can be used for web exercises, allowing Apache running as www-data to write data to these directories
  config.vm.synced_folder "code", "/var/www/html/code", create: true, owner: "www-data", group: "www-data"

  config.vm.boot_timeout = 1500

  # Running various provisioners to set up the basic components needed in the web development classes
  config.vm.provision "Web server: Apache2, PHP 7.4 with extensions and Xdebug", type: "shell",
                      inline: <<-SH
    # Adding PHP PPA by Ondřej Surý
    add-apt-repository -y ppa:ondrej/php
    # Adding Redis Server PPA
    add-apt-repository -y ppa:chris-lea/redis-server
    apt-get -y -qq update

    echo "##############################################"
    echo "## Installing Apache2, PHP 7.4 + extensions ##"
    echo "##############################################"
    apt-get -y -qq install apache2 php7.4 libapache2-mod-php7.4
    apt-get -y -qq install php7.4-zip php7.4-mysql php7.4-curl php7.4-dev php7.4-gd php7.4-intl php-pear php-imagick php7.4-imap php7.4-tidy php7.4-xmlrpc php7.4-xsl php7.4-mbstring php7.4-xml php-gettext php-xdebug
    apt-get -y -qq install zip unzip

    echo "################################################"
    echo "## Activating SSL and mod_rewrite for Apache2 ##"
    echo "################################################"
    a2enmod rewrite
    a2enmod ssl
    a2ensite default-ssl

    echo "#################################"
    echo "# Activating Xdebug for Apache2 #"
    echo "#################################"
    INI=/etc/php/7.4/mods-available/xdebug.ini
    >> "$INI" echo 'xdebug.remote_enable=1'
    >> "$INI" echo 'xdebug.remote_connect_back=1'
    >> "$INI" echo 'xdebug.remote_port=9000'

    echo "########################################"
    echo "## Adding permanent redirect to HTTPS ##"
    echo "########################################"
    cd /etc/apache2/sites-available
    sed -i '29i #' 000-default.conf
    sed -i '30i # Redirct permanently to https ' 000-default.conf
    sed -i '31i # added by Martin Harrer for demonstration purposes in web lessons' 000-default.conf
    sed -i '32i Redirect permanent / https://192.168.7.7/' 000-default.conf

    echo "#############################################################"
    echo "## Switching to AllowOverride All for /var/www/html/code/* ##"
    echo "#############################################################"
    cd /etc/apache2/sites-available
    sed -i '131i <Directory /var/www/html/code/*>' default-ssl.conf
    sed -i '132i     Options Indexes FollowSymLinks MultiViews' default-ssl.conf
    sed -i '133i     AllowOverride All' default-ssl.conf
    sed -i '134i </Directory>' default-ssl.conf
  SH


  config.vm.provision "Database: MariaDB and phpMyAdmin", type: "shell",
                      inline: <<-SH
    echo "######################################################"
    echo "## Setting debconf-settings for noninteractive mode ##"
    echo "######################################################"
    export DEBIAN_FRONTEND=noninteractive
    debconf-set-selections <<< 'mariadb-server-10.4 mysql-server/root_password password geheim'
    debconf-set-selections <<< 'mariadb-server-10.4 mysql-server/root_password_again password geheim'
      
    echo "#######################################"
    echo "## Installing MariaDB and phpMyAdmin ##"
    echo "#######################################"
    apt-key adv --fetch-keys 'https://mariadb.org/mariadb_release_signing_key.asc'
    add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirror.klaus-uwe.me/mariadb/repo/10.4/ubuntu bionic main'
    apt-get -y -qq update
    apt-get -y -qq install mariadb-server mariadb-client
    mysql -uroot -pgeheim -e "CREATE USER 'onlineshop'@'localhost' IDENTIFIED BY 'geheim'"
    mysql -uroot -pgeheim -e "GRANT ALL PRIVILEGES ON *.* TO 'onlineshop'@'localhost'"
    mysql -uroot -pgeheim -e "GRANT ALL PRIVILEGES ON *.* TO 'debian-sys-maint'@'localhost'"
    apt-get -y -qq install phpmyadmin

    echo "################################################"
    echo "## Linking phpMyAdmin to Apache Document Root ##"
    echo "################################################"
    ln -s /usr/share/phpmyadmin/ /var/www/html/phpmyadmin
  SH


  config.vm.provision "PHP tools: PHP_CodeSniffer and Composer", type: "shell",
                      inline: <<-SH
    echo "################################"
    echo "## Installing PHP_CodeSniffer ##"
    echo "################################"  
    cd /usr/local/bin
    curl -s -Ol https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
    curl -s -Ol https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar
    mv phpcs.phar /usr/local/bin/phpcs
    mv phpcbf.phar /usr/local/bin/phpcbf
    chown root:root phpcs phpcbf
    chmod 755 phpcs phpcbf

    echo "#########################"
    echo "## Installing Composer ##"
    echo "#########################"
    cd /home/vagrant
    EXPECTED_CHECKSUM="$(wget -q -O - https://composer.github.io/installer.sig)"
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
    then
      >&2 echo '## ERROR: Invalid installer checksum for composer. Composer not installed. ##'
      rm composer-setup.php
      exit 1
    fi
    php composer-setup.php --install-dir=/usr/local/bin
    rm composer-setup.php
    mv /usr/local/bin/composer.phar /usr/local/bin/composer
  SH


  config.vm.provision "Key-value store and search: Redis and Elasticsearch", type: "shell",
                      inline: <<-SH
    echo "#####################################################"
    echo "## Installing Redis Server and PHP Redis Extension ##"
    echo "#####################################################"
    apt-get -y install redis-server php-redis
    sed -i '70i bind localhost 192.168.7.7' /etc/redis/redis.conf
    sed -i '509i requirepass geheim' /etc/redis/redis.conf
  
    echo "##############################"
    echo "## Installing Elasticsearch ##"
    echo "##############################"
    apt-get install apt-transport-https
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    add-apt-repository "deb https://artifacts.elastic.co/packages/7.x/apt stable main"
    apt-get update
    apt-get install elasticsearch
    /bin/systemctl enable elasticsearch.service
  
    echo "######################################################"
    echo "## Installing German Decompounder for Elasticsearch ##"
    echo "######################################################"
    cd /etc/elasticsearch
    mkdir analysis
    chown vagrant:vagrant analysis
    cd analysis
    git clone https://github.com/uschindler/german-decompounder.git .
  SH


  config.vm.provision "Helper scripts: shell scripts and phpinfo.php", type: "shell",
                      inline: <<-SH
    echo "#################################################"
    echo "## Providing helper shell scripts in $HOME/bin ##"
    echo "#################################################"
    cd /home/vagrant
    mkdir bin
    chown vagrant:vagrant bin
    cd bin
    cp /vagrant/bin/*.sh .
    chown vagrant:vagrant *.sh

    echo "############################################"
    echo "## Providing phpinfo.php in /var/www/html ##"
    echo "############################################"
    cp /vagrant/bin/phpinfo.php /var/www/html
  SH


  config.vm.provision "Service startup: Apache2, MariaDB, Redis and Elasticsearch with run: always", type: "shell", run: "always",
                      inline: <<-SH
    service apache2 restart  && echo "Apache started with return code $?"   
    service mysql restart  && echo "MariaDB started with return code $?"
    service redis-server restart && echo "Redis started with return code $?"
    systemctl stop elasticsearch.service && echo "Elasticsearch stopped with return code $?"
  SH
end
